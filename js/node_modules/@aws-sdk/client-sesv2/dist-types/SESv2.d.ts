import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
import { CreateConfigurationSetCommandInput, CreateConfigurationSetCommandOutput } from "./commands/CreateConfigurationSetCommand";
import { CreateConfigurationSetEventDestinationCommandInput, CreateConfigurationSetEventDestinationCommandOutput } from "./commands/CreateConfigurationSetEventDestinationCommand";
import { CreateContactCommandInput, CreateContactCommandOutput } from "./commands/CreateContactCommand";
import { CreateContactListCommandInput, CreateContactListCommandOutput } from "./commands/CreateContactListCommand";
import { CreateCustomVerificationEmailTemplateCommandInput, CreateCustomVerificationEmailTemplateCommandOutput } from "./commands/CreateCustomVerificationEmailTemplateCommand";
import { CreateDedicatedIpPoolCommandInput, CreateDedicatedIpPoolCommandOutput } from "./commands/CreateDedicatedIpPoolCommand";
import { CreateDeliverabilityTestReportCommandInput, CreateDeliverabilityTestReportCommandOutput } from "./commands/CreateDeliverabilityTestReportCommand";
import { CreateEmailIdentityCommandInput, CreateEmailIdentityCommandOutput } from "./commands/CreateEmailIdentityCommand";
import { CreateEmailIdentityPolicyCommandInput, CreateEmailIdentityPolicyCommandOutput } from "./commands/CreateEmailIdentityPolicyCommand";
import { CreateEmailTemplateCommandInput, CreateEmailTemplateCommandOutput } from "./commands/CreateEmailTemplateCommand";
import { CreateImportJobCommandInput, CreateImportJobCommandOutput } from "./commands/CreateImportJobCommand";
import { DeleteConfigurationSetCommandInput, DeleteConfigurationSetCommandOutput } from "./commands/DeleteConfigurationSetCommand";
import { DeleteConfigurationSetEventDestinationCommandInput, DeleteConfigurationSetEventDestinationCommandOutput } from "./commands/DeleteConfigurationSetEventDestinationCommand";
import { DeleteContactCommandInput, DeleteContactCommandOutput } from "./commands/DeleteContactCommand";
import { DeleteContactListCommandInput, DeleteContactListCommandOutput } from "./commands/DeleteContactListCommand";
import { DeleteCustomVerificationEmailTemplateCommandInput, DeleteCustomVerificationEmailTemplateCommandOutput } from "./commands/DeleteCustomVerificationEmailTemplateCommand";
import { DeleteDedicatedIpPoolCommandInput, DeleteDedicatedIpPoolCommandOutput } from "./commands/DeleteDedicatedIpPoolCommand";
import { DeleteEmailIdentityCommandInput, DeleteEmailIdentityCommandOutput } from "./commands/DeleteEmailIdentityCommand";
import { DeleteEmailIdentityPolicyCommandInput, DeleteEmailIdentityPolicyCommandOutput } from "./commands/DeleteEmailIdentityPolicyCommand";
import { DeleteEmailTemplateCommandInput, DeleteEmailTemplateCommandOutput } from "./commands/DeleteEmailTemplateCommand";
import { DeleteSuppressedDestinationCommandInput, DeleteSuppressedDestinationCommandOutput } from "./commands/DeleteSuppressedDestinationCommand";
import { GetAccountCommandInput, GetAccountCommandOutput } from "./commands/GetAccountCommand";
import { GetBlacklistReportsCommandInput, GetBlacklistReportsCommandOutput } from "./commands/GetBlacklistReportsCommand";
import { GetConfigurationSetCommandInput, GetConfigurationSetCommandOutput } from "./commands/GetConfigurationSetCommand";
import { GetConfigurationSetEventDestinationsCommandInput, GetConfigurationSetEventDestinationsCommandOutput } from "./commands/GetConfigurationSetEventDestinationsCommand";
import { GetContactCommandInput, GetContactCommandOutput } from "./commands/GetContactCommand";
import { GetContactListCommandInput, GetContactListCommandOutput } from "./commands/GetContactListCommand";
import { GetCustomVerificationEmailTemplateCommandInput, GetCustomVerificationEmailTemplateCommandOutput } from "./commands/GetCustomVerificationEmailTemplateCommand";
import { GetDedicatedIpCommandInput, GetDedicatedIpCommandOutput } from "./commands/GetDedicatedIpCommand";
import { GetDedicatedIpsCommandInput, GetDedicatedIpsCommandOutput } from "./commands/GetDedicatedIpsCommand";
import { GetDeliverabilityDashboardOptionsCommandInput, GetDeliverabilityDashboardOptionsCommandOutput } from "./commands/GetDeliverabilityDashboardOptionsCommand";
import { GetDeliverabilityTestReportCommandInput, GetDeliverabilityTestReportCommandOutput } from "./commands/GetDeliverabilityTestReportCommand";
import { GetDomainDeliverabilityCampaignCommandInput, GetDomainDeliverabilityCampaignCommandOutput } from "./commands/GetDomainDeliverabilityCampaignCommand";
import { GetDomainStatisticsReportCommandInput, GetDomainStatisticsReportCommandOutput } from "./commands/GetDomainStatisticsReportCommand";
import { GetEmailIdentityCommandInput, GetEmailIdentityCommandOutput } from "./commands/GetEmailIdentityCommand";
import { GetEmailIdentityPoliciesCommandInput, GetEmailIdentityPoliciesCommandOutput } from "./commands/GetEmailIdentityPoliciesCommand";
import { GetEmailTemplateCommandInput, GetEmailTemplateCommandOutput } from "./commands/GetEmailTemplateCommand";
import { GetImportJobCommandInput, GetImportJobCommandOutput } from "./commands/GetImportJobCommand";
import { GetSuppressedDestinationCommandInput, GetSuppressedDestinationCommandOutput } from "./commands/GetSuppressedDestinationCommand";
import { ListConfigurationSetsCommandInput, ListConfigurationSetsCommandOutput } from "./commands/ListConfigurationSetsCommand";
import { ListContactListsCommandInput, ListContactListsCommandOutput } from "./commands/ListContactListsCommand";
import { ListContactsCommandInput, ListContactsCommandOutput } from "./commands/ListContactsCommand";
import { ListCustomVerificationEmailTemplatesCommandInput, ListCustomVerificationEmailTemplatesCommandOutput } from "./commands/ListCustomVerificationEmailTemplatesCommand";
import { ListDedicatedIpPoolsCommandInput, ListDedicatedIpPoolsCommandOutput } from "./commands/ListDedicatedIpPoolsCommand";
import { ListDeliverabilityTestReportsCommandInput, ListDeliverabilityTestReportsCommandOutput } from "./commands/ListDeliverabilityTestReportsCommand";
import { ListDomainDeliverabilityCampaignsCommandInput, ListDomainDeliverabilityCampaignsCommandOutput } from "./commands/ListDomainDeliverabilityCampaignsCommand";
import { ListEmailIdentitiesCommandInput, ListEmailIdentitiesCommandOutput } from "./commands/ListEmailIdentitiesCommand";
import { ListEmailTemplatesCommandInput, ListEmailTemplatesCommandOutput } from "./commands/ListEmailTemplatesCommand";
import { ListImportJobsCommandInput, ListImportJobsCommandOutput } from "./commands/ListImportJobsCommand";
import { ListSuppressedDestinationsCommandInput, ListSuppressedDestinationsCommandOutput } from "./commands/ListSuppressedDestinationsCommand";
import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "./commands/ListTagsForResourceCommand";
import { PutAccountDedicatedIpWarmupAttributesCommandInput, PutAccountDedicatedIpWarmupAttributesCommandOutput } from "./commands/PutAccountDedicatedIpWarmupAttributesCommand";
import { PutAccountDetailsCommandInput, PutAccountDetailsCommandOutput } from "./commands/PutAccountDetailsCommand";
import { PutAccountSendingAttributesCommandInput, PutAccountSendingAttributesCommandOutput } from "./commands/PutAccountSendingAttributesCommand";
import { PutAccountSuppressionAttributesCommandInput, PutAccountSuppressionAttributesCommandOutput } from "./commands/PutAccountSuppressionAttributesCommand";
import { PutConfigurationSetDeliveryOptionsCommandInput, PutConfigurationSetDeliveryOptionsCommandOutput } from "./commands/PutConfigurationSetDeliveryOptionsCommand";
import { PutConfigurationSetReputationOptionsCommandInput, PutConfigurationSetReputationOptionsCommandOutput } from "./commands/PutConfigurationSetReputationOptionsCommand";
import { PutConfigurationSetSendingOptionsCommandInput, PutConfigurationSetSendingOptionsCommandOutput } from "./commands/PutConfigurationSetSendingOptionsCommand";
import { PutConfigurationSetSuppressionOptionsCommandInput, PutConfigurationSetSuppressionOptionsCommandOutput } from "./commands/PutConfigurationSetSuppressionOptionsCommand";
import { PutConfigurationSetTrackingOptionsCommandInput, PutConfigurationSetTrackingOptionsCommandOutput } from "./commands/PutConfigurationSetTrackingOptionsCommand";
import { PutDedicatedIpInPoolCommandInput, PutDedicatedIpInPoolCommandOutput } from "./commands/PutDedicatedIpInPoolCommand";
import { PutDedicatedIpWarmupAttributesCommandInput, PutDedicatedIpWarmupAttributesCommandOutput } from "./commands/PutDedicatedIpWarmupAttributesCommand";
import { PutDeliverabilityDashboardOptionCommandInput, PutDeliverabilityDashboardOptionCommandOutput } from "./commands/PutDeliverabilityDashboardOptionCommand";
import { PutEmailIdentityConfigurationSetAttributesCommandInput, PutEmailIdentityConfigurationSetAttributesCommandOutput } from "./commands/PutEmailIdentityConfigurationSetAttributesCommand";
import { PutEmailIdentityDkimAttributesCommandInput, PutEmailIdentityDkimAttributesCommandOutput } from "./commands/PutEmailIdentityDkimAttributesCommand";
import { PutEmailIdentityDkimSigningAttributesCommandInput, PutEmailIdentityDkimSigningAttributesCommandOutput } from "./commands/PutEmailIdentityDkimSigningAttributesCommand";
import { PutEmailIdentityFeedbackAttributesCommandInput, PutEmailIdentityFeedbackAttributesCommandOutput } from "./commands/PutEmailIdentityFeedbackAttributesCommand";
import { PutEmailIdentityMailFromAttributesCommandInput, PutEmailIdentityMailFromAttributesCommandOutput } from "./commands/PutEmailIdentityMailFromAttributesCommand";
import { PutSuppressedDestinationCommandInput, PutSuppressedDestinationCommandOutput } from "./commands/PutSuppressedDestinationCommand";
import { SendBulkEmailCommandInput, SendBulkEmailCommandOutput } from "./commands/SendBulkEmailCommand";
import { SendCustomVerificationEmailCommandInput, SendCustomVerificationEmailCommandOutput } from "./commands/SendCustomVerificationEmailCommand";
import { SendEmailCommandInput, SendEmailCommandOutput } from "./commands/SendEmailCommand";
import { TagResourceCommandInput, TagResourceCommandOutput } from "./commands/TagResourceCommand";
import { TestRenderEmailTemplateCommandInput, TestRenderEmailTemplateCommandOutput } from "./commands/TestRenderEmailTemplateCommand";
import { UntagResourceCommandInput, UntagResourceCommandOutput } from "./commands/UntagResourceCommand";
import { UpdateConfigurationSetEventDestinationCommandInput, UpdateConfigurationSetEventDestinationCommandOutput } from "./commands/UpdateConfigurationSetEventDestinationCommand";
import { UpdateContactCommandInput, UpdateContactCommandOutput } from "./commands/UpdateContactCommand";
import { UpdateContactListCommandInput, UpdateContactListCommandOutput } from "./commands/UpdateContactListCommand";
import { UpdateCustomVerificationEmailTemplateCommandInput, UpdateCustomVerificationEmailTemplateCommandOutput } from "./commands/UpdateCustomVerificationEmailTemplateCommand";
import { UpdateEmailIdentityPolicyCommandInput, UpdateEmailIdentityPolicyCommandOutput } from "./commands/UpdateEmailIdentityPolicyCommand";
import { UpdateEmailTemplateCommandInput, UpdateEmailTemplateCommandOutput } from "./commands/UpdateEmailTemplateCommand";
import { SESv2Client } from "./SESv2Client";
/**
 * <fullname>Amazon SES API v2</fullname>
 *
 *         <p>
 *             <a href="http://aws.amazon.com/ses">Amazon SES</a> is an Amazon Web Services service that
 *             you can use to send email messages to your customers.</p>
 *         <p>If you're new to Amazon SES API v2, you might find it helpful to review the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/">Amazon Simple Email Service Developer
 *                 Guide</a>. The <i>Amazon SES Developer Guide</i> provides information
 *             and code samples that demonstrate how to use Amazon SES API v2 features programmatically.</p>
 */
export declare class SESv2 extends SESv2Client {
    /**
     * <p>Create a configuration set. <i>Configuration sets</i> are groups of
     *             rules that you can apply to the emails that you send. You apply a configuration set to
     *             an email by specifying the name of the configuration set when you call the Amazon SES API v2. When
     *             you apply a configuration set to an email, all of the rules in that configuration set
     *             are applied to the email. </p>
     */
    createConfigurationSet(args: CreateConfigurationSetCommandInput, options?: __HttpHandlerOptions): Promise<CreateConfigurationSetCommandOutput>;
    createConfigurationSet(args: CreateConfigurationSetCommandInput, cb: (err: any, data?: CreateConfigurationSetCommandOutput) => void): void;
    createConfigurationSet(args: CreateConfigurationSetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateConfigurationSetCommandOutput) => void): void;
    /**
     * <p>Create an event destination. <i>Events</i> include message sends,
     *             deliveries, opens, clicks, bounces, and complaints. <i>Event
     *                 destinations</i> are places that you can send information about these events
     *             to. For example, you can send event data to Amazon SNS to receive notifications when you
     *             receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term
     *             storage.</p>
     *         <p>A single configuration set can include more than one event destination.</p>
     */
    createConfigurationSetEventDestination(args: CreateConfigurationSetEventDestinationCommandInput, options?: __HttpHandlerOptions): Promise<CreateConfigurationSetEventDestinationCommandOutput>;
    createConfigurationSetEventDestination(args: CreateConfigurationSetEventDestinationCommandInput, cb: (err: any, data?: CreateConfigurationSetEventDestinationCommandOutput) => void): void;
    createConfigurationSetEventDestination(args: CreateConfigurationSetEventDestinationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateConfigurationSetEventDestinationCommandOutput) => void): void;
    /**
     * <p>Creates a contact, which is an end-user who is receiving the email, and adds them to a
     *             contact list.</p>
     */
    createContact(args: CreateContactCommandInput, options?: __HttpHandlerOptions): Promise<CreateContactCommandOutput>;
    createContact(args: CreateContactCommandInput, cb: (err: any, data?: CreateContactCommandOutput) => void): void;
    createContact(args: CreateContactCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateContactCommandOutput) => void): void;
    /**
     * <p>Creates a contact list.</p>
     */
    createContactList(args: CreateContactListCommandInput, options?: __HttpHandlerOptions): Promise<CreateContactListCommandOutput>;
    createContactList(args: CreateContactListCommandInput, cb: (err: any, data?: CreateContactListCommandOutput) => void): void;
    createContactList(args: CreateContactListCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateContactListCommandOutput) => void): void;
    /**
     * <p>Creates a new custom verification email template.</p>
     *         <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-verify-address-custom.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer
     *                 Guide</i>.</p>
     *         <p>You can execute this operation no more than once per second.</p>
     */
    createCustomVerificationEmailTemplate(args: CreateCustomVerificationEmailTemplateCommandInput, options?: __HttpHandlerOptions): Promise<CreateCustomVerificationEmailTemplateCommandOutput>;
    createCustomVerificationEmailTemplate(args: CreateCustomVerificationEmailTemplateCommandInput, cb: (err: any, data?: CreateCustomVerificationEmailTemplateCommandOutput) => void): void;
    createCustomVerificationEmailTemplate(args: CreateCustomVerificationEmailTemplateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateCustomVerificationEmailTemplateCommandOutput) => void): void;
    /**
     * <p>Create a new pool of dedicated IP addresses. A pool can include one or more dedicated
     *             IP addresses that are associated with your Amazon Web Services account. You can associate a pool with
     *             a configuration set. When you send an email that uses that configuration set, the
     *             message is sent from one of the addresses in the associated pool.</p>
     */
    createDedicatedIpPool(args: CreateDedicatedIpPoolCommandInput, options?: __HttpHandlerOptions): Promise<CreateDedicatedIpPoolCommandOutput>;
    createDedicatedIpPool(args: CreateDedicatedIpPoolCommandInput, cb: (err: any, data?: CreateDedicatedIpPoolCommandOutput) => void): void;
    createDedicatedIpPool(args: CreateDedicatedIpPoolCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDedicatedIpPoolCommandOutput) => void): void;
    /**
     * <p>Create a new predictive inbox placement test. Predictive inbox placement tests can help you predict how your messages will be handled
     *             by various email providers around the world. When you perform a predictive inbox placement test, you provide a
     *             sample message that contains the content that you plan to send to your customers. Amazon SES
     *             then sends that message to special email addresses spread across several major email
     *             providers. After about 24 hours, the test is complete, and you can use the
     *                 <code>GetDeliverabilityTestReport</code> operation to view the results of the
     *             test.</p>
     */
    createDeliverabilityTestReport(args: CreateDeliverabilityTestReportCommandInput, options?: __HttpHandlerOptions): Promise<CreateDeliverabilityTestReportCommandOutput>;
    createDeliverabilityTestReport(args: CreateDeliverabilityTestReportCommandInput, cb: (err: any, data?: CreateDeliverabilityTestReportCommandOutput) => void): void;
    createDeliverabilityTestReport(args: CreateDeliverabilityTestReportCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDeliverabilityTestReportCommandOutput) => void): void;
    /**
     * <p>Starts the process of verifying an email identity. An <i>identity</i> is
     *             an email address or domain that you use when you send email. Before you can use an
     *             identity to send email, you first have to verify it. By verifying an identity, you
     *             demonstrate that you're the owner of the identity, and that you've given Amazon SES API v2
     *             permission to send email from the identity.</p>
     *         <p>When you verify an email address, Amazon SES sends an email to the address. Your email
     *             address is verified as soon as you follow the link in the verification email.
     *
     *         </p>
     *         <p>When you verify a domain without specifying the <code>DkimSigningAttributes</code>
     *             object, this operation provides a set of DKIM tokens. You can convert these tokens into
     *             CNAME records, which you then add to the DNS configuration for your domain. Your domain
     *             is verified when Amazon SES detects these records in the DNS configuration for your domain.
     *             This verification method is known as <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Easy DKIM</a>.</p>
     *         <p>Alternatively, you can perform the verification process by providing your own
     *             public-private key pair. This verification method is known as Bring Your Own DKIM
     *             (BYODKIM). To use BYODKIM, your call to the <code>CreateEmailIdentity</code> operation
     *             has to include the <code>DkimSigningAttributes</code> object. When you specify this
     *             object, you provide a selector (a component of the DNS record name that identifies the
     *             public key to use for DKIM authentication) and a private key.</p>
     *         <p>When you verify a domain, this operation provides a set of DKIM tokens, which you can
     *             convert into CNAME tokens. You add these CNAME tokens to the DNS configuration for your
     *             domain. Your domain is verified when Amazon SES detects these records in the DNS
     *             configuration for your domain. For some DNS providers, it can take 72 hours or more to
     *             complete the domain verification process.</p>
     *         <p>Additionally, you can associate an existing configuration set with the email identity that you're verifying.</p>
     */
    createEmailIdentity(args: CreateEmailIdentityCommandInput, options?: __HttpHandlerOptions): Promise<CreateEmailIdentityCommandOutput>;
    createEmailIdentity(args: CreateEmailIdentityCommandInput, cb: (err: any, data?: CreateEmailIdentityCommandOutput) => void): void;
    createEmailIdentity(args: CreateEmailIdentityCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateEmailIdentityCommandOutput) => void): void;
    /**
     * <p>Creates the specified sending authorization policy for the given identity (an email
     *         address or a domain).</p>
     *         <note>
     *             <p>This API is for the identity owner only. If you have not verified the identity,
     *                 this API will return an error.</p>
     *         </note>
     *         <p>Sending authorization is a feature that enables an identity owner to authorize other
     *             senders to use its identities. For information about using sending authorization, see
     *             the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer
     *                 Guide</a>.</p>
     *
     *         <p>You can execute this operation no more than once per second.</p>
     */
    createEmailIdentityPolicy(args: CreateEmailIdentityPolicyCommandInput, options?: __HttpHandlerOptions): Promise<CreateEmailIdentityPolicyCommandOutput>;
    createEmailIdentityPolicy(args: CreateEmailIdentityPolicyCommandInput, cb: (err: any, data?: CreateEmailIdentityPolicyCommandOutput) => void): void;
    createEmailIdentityPolicy(args: CreateEmailIdentityPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateEmailIdentityPolicyCommandOutput) => void): void;
    /**
     * <p>Creates an email template. Email templates enable you to send personalized email to
     *             one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer
     *                 Guide</a>.</p>
     *         <p>You can execute this operation no more than once per second.</p>
     */
    createEmailTemplate(args: CreateEmailTemplateCommandInput, options?: __HttpHandlerOptions): Promise<CreateEmailTemplateCommandOutput>;
    createEmailTemplate(args: CreateEmailTemplateCommandInput, cb: (err: any, data?: CreateEmailTemplateCommandOutput) => void): void;
    createEmailTemplate(args: CreateEmailTemplateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateEmailTemplateCommandOutput) => void): void;
    /**
     * <p>Creates an import job for a data destination.</p>
     */
    createImportJob(args: CreateImportJobCommandInput, options?: __HttpHandlerOptions): Promise<CreateImportJobCommandOutput>;
    createImportJob(args: CreateImportJobCommandInput, cb: (err: any, data?: CreateImportJobCommandOutput) => void): void;
    createImportJob(args: CreateImportJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateImportJobCommandOutput) => void): void;
    /**
     * <p>Delete an existing configuration set.</p>
     *         <p>
     *             <i>Configuration sets</i> are groups of rules that you can apply to the
     *             emails you send. You apply a configuration set to an email by including a reference to
     *             the configuration set in the headers of the email. When you apply a configuration set to
     *             an email, all of the rules in that configuration set are applied to the email.</p>
     */
    deleteConfigurationSet(args: DeleteConfigurationSetCommandInput, options?: __HttpHandlerOptions): Promise<DeleteConfigurationSetCommandOutput>;
    deleteConfigurationSet(args: DeleteConfigurationSetCommandInput, cb: (err: any, data?: DeleteConfigurationSetCommandOutput) => void): void;
    deleteConfigurationSet(args: DeleteConfigurationSetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteConfigurationSetCommandOutput) => void): void;
    /**
     * <p>Delete an event destination.</p>
     *         <p>
     *             <i>Events</i> include message sends, deliveries, opens, clicks, bounces,
     *             and complaints. <i>Event destinations</i> are places that you can send
     *             information about these events to. For example, you can send event data to Amazon SNS to
     *             receive notifications when you receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to
     *             stream data to Amazon S3 for long-term storage.</p>
     */
    deleteConfigurationSetEventDestination(args: DeleteConfigurationSetEventDestinationCommandInput, options?: __HttpHandlerOptions): Promise<DeleteConfigurationSetEventDestinationCommandOutput>;
    deleteConfigurationSetEventDestination(args: DeleteConfigurationSetEventDestinationCommandInput, cb: (err: any, data?: DeleteConfigurationSetEventDestinationCommandOutput) => void): void;
    deleteConfigurationSetEventDestination(args: DeleteConfigurationSetEventDestinationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteConfigurationSetEventDestinationCommandOutput) => void): void;
    /**
     * <p>Removes a contact from a contact list.</p>
     */
    deleteContact(args: DeleteContactCommandInput, options?: __HttpHandlerOptions): Promise<DeleteContactCommandOutput>;
    deleteContact(args: DeleteContactCommandInput, cb: (err: any, data?: DeleteContactCommandOutput) => void): void;
    deleteContact(args: DeleteContactCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteContactCommandOutput) => void): void;
    /**
     * <p>Deletes a contact list and all of the contacts on that list.</p>
     */
    deleteContactList(args: DeleteContactListCommandInput, options?: __HttpHandlerOptions): Promise<DeleteContactListCommandOutput>;
    deleteContactList(args: DeleteContactListCommandInput, cb: (err: any, data?: DeleteContactListCommandOutput) => void): void;
    deleteContactList(args: DeleteContactListCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteContactListCommandOutput) => void): void;
    /**
     * <p>Deletes an existing custom verification email template.</p>
     *         <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-verify-address-custom.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer
     *                 Guide</i>.</p>
     *         <p>You can execute this operation no more than once per second.</p>
     */
    deleteCustomVerificationEmailTemplate(args: DeleteCustomVerificationEmailTemplateCommandInput, options?: __HttpHandlerOptions): Promise<DeleteCustomVerificationEmailTemplateCommandOutput>;
    deleteCustomVerificationEmailTemplate(args: DeleteCustomVerificationEmailTemplateCommandInput, cb: (err: any, data?: DeleteCustomVerificationEmailTemplateCommandOutput) => void): void;
    deleteCustomVerificationEmailTemplate(args: DeleteCustomVerificationEmailTemplateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteCustomVerificationEmailTemplateCommandOutput) => void): void;
    /**
     * <p>Delete a dedicated IP pool.</p>
     */
    deleteDedicatedIpPool(args: DeleteDedicatedIpPoolCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDedicatedIpPoolCommandOutput>;
    deleteDedicatedIpPool(args: DeleteDedicatedIpPoolCommandInput, cb: (err: any, data?: DeleteDedicatedIpPoolCommandOutput) => void): void;
    deleteDedicatedIpPool(args: DeleteDedicatedIpPoolCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDedicatedIpPoolCommandOutput) => void): void;
    /**
     * <p>Deletes an email identity. An identity can be either an email address or a domain
     *             name.</p>
     */
    deleteEmailIdentity(args: DeleteEmailIdentityCommandInput, options?: __HttpHandlerOptions): Promise<DeleteEmailIdentityCommandOutput>;
    deleteEmailIdentity(args: DeleteEmailIdentityCommandInput, cb: (err: any, data?: DeleteEmailIdentityCommandOutput) => void): void;
    deleteEmailIdentity(args: DeleteEmailIdentityCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteEmailIdentityCommandOutput) => void): void;
    /**
     * <p>Deletes the specified sending authorization policy for the given identity (an email
     *             address or a domain). This API returns successfully even if a policy with the specified
     *             name does not exist.</p>
     *         <note>
     *             <p>This API is for the identity owner only. If you have not verified the identity,
     *                 this API will return an error.</p>
     *         </note>
     *         <p>Sending authorization is a feature that enables an identity owner to authorize other
     *             senders to use its identities. For information about using sending authorization, see
     *             the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer
     *                 Guide</a>.</p>
     *
     *         <p>You can execute this operation no more than once per second.</p>
     */
    deleteEmailIdentityPolicy(args: DeleteEmailIdentityPolicyCommandInput, options?: __HttpHandlerOptions): Promise<DeleteEmailIdentityPolicyCommandOutput>;
    deleteEmailIdentityPolicy(args: DeleteEmailIdentityPolicyCommandInput, cb: (err: any, data?: DeleteEmailIdentityPolicyCommandOutput) => void): void;
    deleteEmailIdentityPolicy(args: DeleteEmailIdentityPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteEmailIdentityPolicyCommandOutput) => void): void;
    /**
     * <p>Deletes an email template.</p>
     *
     *         <p>You can execute this operation no more than once per second.</p>
     */
    deleteEmailTemplate(args: DeleteEmailTemplateCommandInput, options?: __HttpHandlerOptions): Promise<DeleteEmailTemplateCommandOutput>;
    deleteEmailTemplate(args: DeleteEmailTemplateCommandInput, cb: (err: any, data?: DeleteEmailTemplateCommandOutput) => void): void;
    deleteEmailTemplate(args: DeleteEmailTemplateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteEmailTemplateCommandOutput) => void): void;
    /**
     * <p>Removes an email address from the suppression list for your account.</p>
     */
    deleteSuppressedDestination(args: DeleteSuppressedDestinationCommandInput, options?: __HttpHandlerOptions): Promise<DeleteSuppressedDestinationCommandOutput>;
    deleteSuppressedDestination(args: DeleteSuppressedDestinationCommandInput, cb: (err: any, data?: DeleteSuppressedDestinationCommandOutput) => void): void;
    deleteSuppressedDestination(args: DeleteSuppressedDestinationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteSuppressedDestinationCommandOutput) => void): void;
    /**
     * <p>Obtain information about the email-sending status and capabilities of your Amazon SES
     *             account in the current Amazon Web Services Region.</p>
     */
    getAccount(args: GetAccountCommandInput, options?: __HttpHandlerOptions): Promise<GetAccountCommandOutput>;
    getAccount(args: GetAccountCommandInput, cb: (err: any, data?: GetAccountCommandOutput) => void): void;
    getAccount(args: GetAccountCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetAccountCommandOutput) => void): void;
    /**
     * <p>Retrieve a list of the blacklists that your dedicated IP addresses appear on.</p>
     */
    getBlacklistReports(args: GetBlacklistReportsCommandInput, options?: __HttpHandlerOptions): Promise<GetBlacklistReportsCommandOutput>;
    getBlacklistReports(args: GetBlacklistReportsCommandInput, cb: (err: any, data?: GetBlacklistReportsCommandOutput) => void): void;
    getBlacklistReports(args: GetBlacklistReportsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetBlacklistReportsCommandOutput) => void): void;
    /**
     * <p>Get information about an existing configuration set, including the dedicated IP pool
     *             that it's associated with, whether or not it's enabled for sending email, and
     *             more.</p>
     *         <p>
     *             <i>Configuration sets</i> are groups of rules that you can apply to the
     *             emails you send. You apply a configuration set to an email by including a reference to
     *             the configuration set in the headers of the email. When you apply a configuration set to
     *             an email, all of the rules in that configuration set are applied to the email.</p>
     */
    getConfigurationSet(args: GetConfigurationSetCommandInput, options?: __HttpHandlerOptions): Promise<GetConfigurationSetCommandOutput>;
    getConfigurationSet(args: GetConfigurationSetCommandInput, cb: (err: any, data?: GetConfigurationSetCommandOutput) => void): void;
    getConfigurationSet(args: GetConfigurationSetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetConfigurationSetCommandOutput) => void): void;
    /**
     * <p>Retrieve a list of event destinations that are associated with a configuration
     *             set.</p>
     *         <p>
     *             <i>Events</i> include message sends, deliveries, opens, clicks, bounces,
     *             and complaints. <i>Event destinations</i> are places that you can send
     *             information about these events to. For example, you can send event data to Amazon SNS to
     *             receive notifications when you receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to
     *             stream data to Amazon S3 for long-term storage.</p>
     */
    getConfigurationSetEventDestinations(args: GetConfigurationSetEventDestinationsCommandInput, options?: __HttpHandlerOptions): Promise<GetConfigurationSetEventDestinationsCommandOutput>;
    getConfigurationSetEventDestinations(args: GetConfigurationSetEventDestinationsCommandInput, cb: (err: any, data?: GetConfigurationSetEventDestinationsCommandOutput) => void): void;
    getConfigurationSetEventDestinations(args: GetConfigurationSetEventDestinationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetConfigurationSetEventDestinationsCommandOutput) => void): void;
    /**
     * <p>Returns a contact from a contact list.</p>
     */
    getContact(args: GetContactCommandInput, options?: __HttpHandlerOptions): Promise<GetContactCommandOutput>;
    getContact(args: GetContactCommandInput, cb: (err: any, data?: GetContactCommandOutput) => void): void;
    getContact(args: GetContactCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetContactCommandOutput) => void): void;
    /**
     * <p>Returns contact list metadata. It does not return any information about the contacts
     *             present in the list.</p>
     */
    getContactList(args: GetContactListCommandInput, options?: __HttpHandlerOptions): Promise<GetContactListCommandOutput>;
    getContactList(args: GetContactListCommandInput, cb: (err: any, data?: GetContactListCommandOutput) => void): void;
    getContactList(args: GetContactListCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetContactListCommandOutput) => void): void;
    /**
     * <p>Returns the custom email verification template for the template name you
     *             specify.</p>
     *         <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-verify-address-custom.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer
     *                 Guide</i>.</p>
     *         <p>You can execute this operation no more than once per second.</p>
     */
    getCustomVerificationEmailTemplate(args: GetCustomVerificationEmailTemplateCommandInput, options?: __HttpHandlerOptions): Promise<GetCustomVerificationEmailTemplateCommandOutput>;
    getCustomVerificationEmailTemplate(args: GetCustomVerificationEmailTemplateCommandInput, cb: (err: any, data?: GetCustomVerificationEmailTemplateCommandOutput) => void): void;
    getCustomVerificationEmailTemplate(args: GetCustomVerificationEmailTemplateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetCustomVerificationEmailTemplateCommandOutput) => void): void;
    /**
     * <p>Get information about a dedicated IP address, including the name of the dedicated IP
     *             pool that it's associated with, as well information about the automatic warm-up process
     *             for the address.</p>
     */
    getDedicatedIp(args: GetDedicatedIpCommandInput, options?: __HttpHandlerOptions): Promise<GetDedicatedIpCommandOutput>;
    getDedicatedIp(args: GetDedicatedIpCommandInput, cb: (err: any, data?: GetDedicatedIpCommandOutput) => void): void;
    getDedicatedIp(args: GetDedicatedIpCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDedicatedIpCommandOutput) => void): void;
    /**
     * <p>List the dedicated IP addresses that are associated with your Amazon Web Services
     *             account.</p>
     */
    getDedicatedIps(args: GetDedicatedIpsCommandInput, options?: __HttpHandlerOptions): Promise<GetDedicatedIpsCommandOutput>;
    getDedicatedIps(args: GetDedicatedIpsCommandInput, cb: (err: any, data?: GetDedicatedIpsCommandOutput) => void): void;
    getDedicatedIps(args: GetDedicatedIpsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDedicatedIpsCommandOutput) => void): void;
    /**
     * <p>Retrieve information about the status of the Deliverability dashboard for your account. When
     *             the Deliverability dashboard is enabled, you gain access to reputation, deliverability, and other
     *             metrics for the domains that you use to send email. You also gain the ability to perform
     *             predictive inbox placement tests.</p>
     *
     *         <p>When you use the Deliverability dashboard, you pay a monthly subscription charge, in addition
     *             to any other fees that you accrue by using Amazon SES and other Amazon Web Services services. For more
     *             information about the features and cost of a Deliverability dashboard subscription, see <a href="http://aws.amazon.com/ses/pricing/">Amazon SES Pricing</a>.</p>
     */
    getDeliverabilityDashboardOptions(args: GetDeliverabilityDashboardOptionsCommandInput, options?: __HttpHandlerOptions): Promise<GetDeliverabilityDashboardOptionsCommandOutput>;
    getDeliverabilityDashboardOptions(args: GetDeliverabilityDashboardOptionsCommandInput, cb: (err: any, data?: GetDeliverabilityDashboardOptionsCommandOutput) => void): void;
    getDeliverabilityDashboardOptions(args: GetDeliverabilityDashboardOptionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDeliverabilityDashboardOptionsCommandOutput) => void): void;
    /**
     * <p>Retrieve the results of a predictive inbox placement test.</p>
     */
    getDeliverabilityTestReport(args: GetDeliverabilityTestReportCommandInput, options?: __HttpHandlerOptions): Promise<GetDeliverabilityTestReportCommandOutput>;
    getDeliverabilityTestReport(args: GetDeliverabilityTestReportCommandInput, cb: (err: any, data?: GetDeliverabilityTestReportCommandOutput) => void): void;
    getDeliverabilityTestReport(args: GetDeliverabilityTestReportCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDeliverabilityTestReportCommandOutput) => void): void;
    /**
     * <p>Retrieve all the deliverability data for a specific campaign. This data is available
     *             for a campaign only if the campaign sent email by using a domain that the
     *             Deliverability dashboard is enabled for.</p>
     */
    getDomainDeliverabilityCampaign(args: GetDomainDeliverabilityCampaignCommandInput, options?: __HttpHandlerOptions): Promise<GetDomainDeliverabilityCampaignCommandOutput>;
    getDomainDeliverabilityCampaign(args: GetDomainDeliverabilityCampaignCommandInput, cb: (err: any, data?: GetDomainDeliverabilityCampaignCommandOutput) => void): void;
    getDomainDeliverabilityCampaign(args: GetDomainDeliverabilityCampaignCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDomainDeliverabilityCampaignCommandOutput) => void): void;
    /**
     * <p>Retrieve inbox placement and engagement rates for the domains that you use to send
     *             email.</p>
     */
    getDomainStatisticsReport(args: GetDomainStatisticsReportCommandInput, options?: __HttpHandlerOptions): Promise<GetDomainStatisticsReportCommandOutput>;
    getDomainStatisticsReport(args: GetDomainStatisticsReportCommandInput, cb: (err: any, data?: GetDomainStatisticsReportCommandOutput) => void): void;
    getDomainStatisticsReport(args: GetDomainStatisticsReportCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDomainStatisticsReportCommandOutput) => void): void;
    /**
     * <p>Provides information about a specific identity, including the identity's verification
     *             status, sending authorization policies, its DKIM authentication status, and its custom
     *             Mail-From settings.</p>
     */
    getEmailIdentity(args: GetEmailIdentityCommandInput, options?: __HttpHandlerOptions): Promise<GetEmailIdentityCommandOutput>;
    getEmailIdentity(args: GetEmailIdentityCommandInput, cb: (err: any, data?: GetEmailIdentityCommandOutput) => void): void;
    getEmailIdentity(args: GetEmailIdentityCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetEmailIdentityCommandOutput) => void): void;
    /**
     * <p>Returns the requested sending authorization policies for the given identity (an email
     *             address or a domain). The policies are returned as a map of policy names to policy
     *             contents. You can retrieve a maximum of 20 policies at a time.</p>
     *         <note>
     *             <p>This API is for the identity owner only. If you have not verified the identity,
     *                 this API will return an error.</p>
     *         </note>
     *         <p>Sending authorization is a feature that enables an identity owner to authorize other
     *             senders to use its identities. For information about using sending authorization, see
     *             the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer
     *                 Guide</a>.</p>
     *         <p>You can execute this operation no more than once per second.</p>
     */
    getEmailIdentityPolicies(args: GetEmailIdentityPoliciesCommandInput, options?: __HttpHandlerOptions): Promise<GetEmailIdentityPoliciesCommandOutput>;
    getEmailIdentityPolicies(args: GetEmailIdentityPoliciesCommandInput, cb: (err: any, data?: GetEmailIdentityPoliciesCommandOutput) => void): void;
    getEmailIdentityPolicies(args: GetEmailIdentityPoliciesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetEmailIdentityPoliciesCommandOutput) => void): void;
    /**
     * <p>Displays the template object (which includes the subject line, HTML part and text
     *             part) for the template you specify.</p>
     *
     *         <p>You can execute this operation no more than once per second.</p>
     */
    getEmailTemplate(args: GetEmailTemplateCommandInput, options?: __HttpHandlerOptions): Promise<GetEmailTemplateCommandOutput>;
    getEmailTemplate(args: GetEmailTemplateCommandInput, cb: (err: any, data?: GetEmailTemplateCommandOutput) => void): void;
    getEmailTemplate(args: GetEmailTemplateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetEmailTemplateCommandOutput) => void): void;
    /**
     * <p>Provides information about an import job.</p>
     */
    getImportJob(args: GetImportJobCommandInput, options?: __HttpHandlerOptions): Promise<GetImportJobCommandOutput>;
    getImportJob(args: GetImportJobCommandInput, cb: (err: any, data?: GetImportJobCommandOutput) => void): void;
    getImportJob(args: GetImportJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetImportJobCommandOutput) => void): void;
    /**
     * <p>Retrieves information about a specific email address that's on the suppression list
     *             for your account.</p>
     */
    getSuppressedDestination(args: GetSuppressedDestinationCommandInput, options?: __HttpHandlerOptions): Promise<GetSuppressedDestinationCommandOutput>;
    getSuppressedDestination(args: GetSuppressedDestinationCommandInput, cb: (err: any, data?: GetSuppressedDestinationCommandOutput) => void): void;
    getSuppressedDestination(args: GetSuppressedDestinationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetSuppressedDestinationCommandOutput) => void): void;
    /**
     * <p>List all of the configuration sets associated with your account in the current
     *             region.</p>
     *         <p>
     *             <i>Configuration sets</i> are groups of rules that you can apply to the
     *             emails you send. You apply a configuration set to an email by including a reference to
     *             the configuration set in the headers of the email. When you apply a configuration set to
     *             an email, all of the rules in that configuration set are applied to the email.</p>
     */
    listConfigurationSets(args: ListConfigurationSetsCommandInput, options?: __HttpHandlerOptions): Promise<ListConfigurationSetsCommandOutput>;
    listConfigurationSets(args: ListConfigurationSetsCommandInput, cb: (err: any, data?: ListConfigurationSetsCommandOutput) => void): void;
    listConfigurationSets(args: ListConfigurationSetsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListConfigurationSetsCommandOutput) => void): void;
    /**
     * <p>Lists all of the contact lists available.</p>
     */
    listContactLists(args: ListContactListsCommandInput, options?: __HttpHandlerOptions): Promise<ListContactListsCommandOutput>;
    listContactLists(args: ListContactListsCommandInput, cb: (err: any, data?: ListContactListsCommandOutput) => void): void;
    listContactLists(args: ListContactListsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListContactListsCommandOutput) => void): void;
    /**
     * <p>Lists the contacts present in a specific contact list.</p>
     */
    listContacts(args: ListContactsCommandInput, options?: __HttpHandlerOptions): Promise<ListContactsCommandOutput>;
    listContacts(args: ListContactsCommandInput, cb: (err: any, data?: ListContactsCommandOutput) => void): void;
    listContacts(args: ListContactsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListContactsCommandOutput) => void): void;
    /**
     * <p>Lists the existing custom verification email templates for your account in the current
     *             Amazon Web Services Region.</p>
     *         <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-verify-address-custom.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer
     *                 Guide</i>.</p>
     *         <p>You can execute this operation no more than once per second.</p>
     */
    listCustomVerificationEmailTemplates(args: ListCustomVerificationEmailTemplatesCommandInput, options?: __HttpHandlerOptions): Promise<ListCustomVerificationEmailTemplatesCommandOutput>;
    listCustomVerificationEmailTemplates(args: ListCustomVerificationEmailTemplatesCommandInput, cb: (err: any, data?: ListCustomVerificationEmailTemplatesCommandOutput) => void): void;
    listCustomVerificationEmailTemplates(args: ListCustomVerificationEmailTemplatesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListCustomVerificationEmailTemplatesCommandOutput) => void): void;
    /**
     * <p>List all of the dedicated IP pools that exist in your Amazon Web Services account in the current
     *             Region.</p>
     */
    listDedicatedIpPools(args: ListDedicatedIpPoolsCommandInput, options?: __HttpHandlerOptions): Promise<ListDedicatedIpPoolsCommandOutput>;
    listDedicatedIpPools(args: ListDedicatedIpPoolsCommandInput, cb: (err: any, data?: ListDedicatedIpPoolsCommandOutput) => void): void;
    listDedicatedIpPools(args: ListDedicatedIpPoolsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDedicatedIpPoolsCommandOutput) => void): void;
    /**
     * <p>Show a list of the predictive inbox placement tests that you've performed, regardless of their statuses. For
     *             predictive inbox placement tests that are complete, you can use the <code>GetDeliverabilityTestReport</code>
     *             operation to view the results.</p>
     */
    listDeliverabilityTestReports(args: ListDeliverabilityTestReportsCommandInput, options?: __HttpHandlerOptions): Promise<ListDeliverabilityTestReportsCommandOutput>;
    listDeliverabilityTestReports(args: ListDeliverabilityTestReportsCommandInput, cb: (err: any, data?: ListDeliverabilityTestReportsCommandOutput) => void): void;
    listDeliverabilityTestReports(args: ListDeliverabilityTestReportsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDeliverabilityTestReportsCommandOutput) => void): void;
    /**
     * <p>Retrieve deliverability data for all the campaigns that used a specific domain to send
     *             email during a specified time range. This data is available for a domain only if you
     *             enabled the Deliverability dashboard for the domain.</p>
     */
    listDomainDeliverabilityCampaigns(args: ListDomainDeliverabilityCampaignsCommandInput, options?: __HttpHandlerOptions): Promise<ListDomainDeliverabilityCampaignsCommandOutput>;
    listDomainDeliverabilityCampaigns(args: ListDomainDeliverabilityCampaignsCommandInput, cb: (err: any, data?: ListDomainDeliverabilityCampaignsCommandOutput) => void): void;
    listDomainDeliverabilityCampaigns(args: ListDomainDeliverabilityCampaignsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDomainDeliverabilityCampaignsCommandOutput) => void): void;
    /**
     * <p>Returns a list of all of the email identities that are associated with your Amazon Web Services
     *             account. An identity can be either an email address or a domain. This operation returns
     *             identities that are verified as well as those that aren't. This operation returns
     *             identities that are associated with Amazon SES and Amazon Pinpoint.</p>
     */
    listEmailIdentities(args: ListEmailIdentitiesCommandInput, options?: __HttpHandlerOptions): Promise<ListEmailIdentitiesCommandOutput>;
    listEmailIdentities(args: ListEmailIdentitiesCommandInput, cb: (err: any, data?: ListEmailIdentitiesCommandOutput) => void): void;
    listEmailIdentities(args: ListEmailIdentitiesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListEmailIdentitiesCommandOutput) => void): void;
    /**
     * <p>Lists the email templates present in your Amazon SES account in the current Amazon Web Services
     *             Region.</p>
     *
     *         <p>You can execute this operation no more than once per second.</p>
     */
    listEmailTemplates(args: ListEmailTemplatesCommandInput, options?: __HttpHandlerOptions): Promise<ListEmailTemplatesCommandOutput>;
    listEmailTemplates(args: ListEmailTemplatesCommandInput, cb: (err: any, data?: ListEmailTemplatesCommandOutput) => void): void;
    listEmailTemplates(args: ListEmailTemplatesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListEmailTemplatesCommandOutput) => void): void;
    /**
     * <p>Lists all of the import jobs.</p>
     */
    listImportJobs(args: ListImportJobsCommandInput, options?: __HttpHandlerOptions): Promise<ListImportJobsCommandOutput>;
    listImportJobs(args: ListImportJobsCommandInput, cb: (err: any, data?: ListImportJobsCommandOutput) => void): void;
    listImportJobs(args: ListImportJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListImportJobsCommandOutput) => void): void;
    /**
     * <p>Retrieves a list of email addresses that are on the suppression list for your
     *             account.</p>
     */
    listSuppressedDestinations(args: ListSuppressedDestinationsCommandInput, options?: __HttpHandlerOptions): Promise<ListSuppressedDestinationsCommandOutput>;
    listSuppressedDestinations(args: ListSuppressedDestinationsCommandInput, cb: (err: any, data?: ListSuppressedDestinationsCommandOutput) => void): void;
    listSuppressedDestinations(args: ListSuppressedDestinationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListSuppressedDestinationsCommandOutput) => void): void;
    /**
     * <p>Retrieve a list of the tags (keys and values) that are associated with a specified
     *             resource. A <i>tag</i> is a label that you optionally define and associate
     *             with a resource. Each tag consists of a required <i>tag key</i> and an
     *             optional associated <i>tag value</i>. A tag key is a general label that
     *             acts as a category for more specific tag values. A tag value acts as a descriptor within
     *             a tag key.</p>
     */
    listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
    listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
    listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
    /**
     * <p>Enable or disable the automatic warm-up feature for dedicated IP addresses.</p>
     */
    putAccountDedicatedIpWarmupAttributes(args: PutAccountDedicatedIpWarmupAttributesCommandInput, options?: __HttpHandlerOptions): Promise<PutAccountDedicatedIpWarmupAttributesCommandOutput>;
    putAccountDedicatedIpWarmupAttributes(args: PutAccountDedicatedIpWarmupAttributesCommandInput, cb: (err: any, data?: PutAccountDedicatedIpWarmupAttributesCommandOutput) => void): void;
    putAccountDedicatedIpWarmupAttributes(args: PutAccountDedicatedIpWarmupAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutAccountDedicatedIpWarmupAttributesCommandOutput) => void): void;
    /**
     * <p>Update your Amazon SES account details.</p>
     */
    putAccountDetails(args: PutAccountDetailsCommandInput, options?: __HttpHandlerOptions): Promise<PutAccountDetailsCommandOutput>;
    putAccountDetails(args: PutAccountDetailsCommandInput, cb: (err: any, data?: PutAccountDetailsCommandOutput) => void): void;
    putAccountDetails(args: PutAccountDetailsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutAccountDetailsCommandOutput) => void): void;
    /**
     * <p>Enable or disable the ability of your account to send email.</p>
     */
    putAccountSendingAttributes(args: PutAccountSendingAttributesCommandInput, options?: __HttpHandlerOptions): Promise<PutAccountSendingAttributesCommandOutput>;
    putAccountSendingAttributes(args: PutAccountSendingAttributesCommandInput, cb: (err: any, data?: PutAccountSendingAttributesCommandOutput) => void): void;
    putAccountSendingAttributes(args: PutAccountSendingAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutAccountSendingAttributesCommandOutput) => void): void;
    /**
     * <p>Change the settings for the account-level suppression list.</p>
     */
    putAccountSuppressionAttributes(args: PutAccountSuppressionAttributesCommandInput, options?: __HttpHandlerOptions): Promise<PutAccountSuppressionAttributesCommandOutput>;
    putAccountSuppressionAttributes(args: PutAccountSuppressionAttributesCommandInput, cb: (err: any, data?: PutAccountSuppressionAttributesCommandOutput) => void): void;
    putAccountSuppressionAttributes(args: PutAccountSuppressionAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutAccountSuppressionAttributesCommandOutput) => void): void;
    /**
     * <p>Associate a configuration set with a dedicated IP pool. You can use dedicated IP pools
     *             to create groups of dedicated IP addresses for sending specific types of email.</p>
     */
    putConfigurationSetDeliveryOptions(args: PutConfigurationSetDeliveryOptionsCommandInput, options?: __HttpHandlerOptions): Promise<PutConfigurationSetDeliveryOptionsCommandOutput>;
    putConfigurationSetDeliveryOptions(args: PutConfigurationSetDeliveryOptionsCommandInput, cb: (err: any, data?: PutConfigurationSetDeliveryOptionsCommandOutput) => void): void;
    putConfigurationSetDeliveryOptions(args: PutConfigurationSetDeliveryOptionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutConfigurationSetDeliveryOptionsCommandOutput) => void): void;
    /**
     * <p>Enable or disable collection of reputation metrics for emails that you send using a
     *             particular configuration set in a specific Amazon Web Services Region.</p>
     */
    putConfigurationSetReputationOptions(args: PutConfigurationSetReputationOptionsCommandInput, options?: __HttpHandlerOptions): Promise<PutConfigurationSetReputationOptionsCommandOutput>;
    putConfigurationSetReputationOptions(args: PutConfigurationSetReputationOptionsCommandInput, cb: (err: any, data?: PutConfigurationSetReputationOptionsCommandOutput) => void): void;
    putConfigurationSetReputationOptions(args: PutConfigurationSetReputationOptionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutConfigurationSetReputationOptionsCommandOutput) => void): void;
    /**
     * <p>Enable or disable email sending for messages that use a particular configuration set
     *             in a specific Amazon Web Services Region.</p>
     */
    putConfigurationSetSendingOptions(args: PutConfigurationSetSendingOptionsCommandInput, options?: __HttpHandlerOptions): Promise<PutConfigurationSetSendingOptionsCommandOutput>;
    putConfigurationSetSendingOptions(args: PutConfigurationSetSendingOptionsCommandInput, cb: (err: any, data?: PutConfigurationSetSendingOptionsCommandOutput) => void): void;
    putConfigurationSetSendingOptions(args: PutConfigurationSetSendingOptionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutConfigurationSetSendingOptionsCommandOutput) => void): void;
    /**
     * <p>Specify the account suppression list preferences for a configuration set.</p>
     */
    putConfigurationSetSuppressionOptions(args: PutConfigurationSetSuppressionOptionsCommandInput, options?: __HttpHandlerOptions): Promise<PutConfigurationSetSuppressionOptionsCommandOutput>;
    putConfigurationSetSuppressionOptions(args: PutConfigurationSetSuppressionOptionsCommandInput, cb: (err: any, data?: PutConfigurationSetSuppressionOptionsCommandOutput) => void): void;
    putConfigurationSetSuppressionOptions(args: PutConfigurationSetSuppressionOptionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutConfigurationSetSuppressionOptionsCommandOutput) => void): void;
    /**
     * <p>Specify a custom domain to use for open and click tracking elements in email that you
     *             send.</p>
     */
    putConfigurationSetTrackingOptions(args: PutConfigurationSetTrackingOptionsCommandInput, options?: __HttpHandlerOptions): Promise<PutConfigurationSetTrackingOptionsCommandOutput>;
    putConfigurationSetTrackingOptions(args: PutConfigurationSetTrackingOptionsCommandInput, cb: (err: any, data?: PutConfigurationSetTrackingOptionsCommandOutput) => void): void;
    putConfigurationSetTrackingOptions(args: PutConfigurationSetTrackingOptionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutConfigurationSetTrackingOptionsCommandOutput) => void): void;
    /**
     * <p>Move a dedicated IP address to an existing dedicated IP pool.</p>
     *         <note>
     *             <p>The dedicated IP address that you specify must already exist, and must be
     *                 associated with your Amazon Web Services account.
     *
     *             </p>
     *             <p>The dedicated IP pool you specify must already exist. You can create a new pool by
     *                 using the <code>CreateDedicatedIpPool</code> operation.</p>
     *
     *         </note>
     */
    putDedicatedIpInPool(args: PutDedicatedIpInPoolCommandInput, options?: __HttpHandlerOptions): Promise<PutDedicatedIpInPoolCommandOutput>;
    putDedicatedIpInPool(args: PutDedicatedIpInPoolCommandInput, cb: (err: any, data?: PutDedicatedIpInPoolCommandOutput) => void): void;
    putDedicatedIpInPool(args: PutDedicatedIpInPoolCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutDedicatedIpInPoolCommandOutput) => void): void;
    /**
     * <p></p>
     */
    putDedicatedIpWarmupAttributes(args: PutDedicatedIpWarmupAttributesCommandInput, options?: __HttpHandlerOptions): Promise<PutDedicatedIpWarmupAttributesCommandOutput>;
    putDedicatedIpWarmupAttributes(args: PutDedicatedIpWarmupAttributesCommandInput, cb: (err: any, data?: PutDedicatedIpWarmupAttributesCommandOutput) => void): void;
    putDedicatedIpWarmupAttributes(args: PutDedicatedIpWarmupAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutDedicatedIpWarmupAttributesCommandOutput) => void): void;
    /**
     * <p>Enable or disable the Deliverability dashboard. When you enable the Deliverability dashboard, you gain
     *             access to reputation, deliverability, and other metrics for the domains that you use to
     *             send email. You also gain the ability to perform predictive inbox placement tests.</p>
     *
     *         <p>When you use the Deliverability dashboard, you pay a monthly subscription charge, in addition
     *             to any other fees that you accrue by using Amazon SES and other Amazon Web Services services. For more
     *             information about the features and cost of a Deliverability dashboard subscription, see <a href="http://aws.amazon.com/ses/pricing/">Amazon SES Pricing</a>.</p>
     */
    putDeliverabilityDashboardOption(args: PutDeliverabilityDashboardOptionCommandInput, options?: __HttpHandlerOptions): Promise<PutDeliverabilityDashboardOptionCommandOutput>;
    putDeliverabilityDashboardOption(args: PutDeliverabilityDashboardOptionCommandInput, cb: (err: any, data?: PutDeliverabilityDashboardOptionCommandOutput) => void): void;
    putDeliverabilityDashboardOption(args: PutDeliverabilityDashboardOptionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutDeliverabilityDashboardOptionCommandOutput) => void): void;
    /**
     * <p>Used to associate a configuration set with an email identity.</p>
     */
    putEmailIdentityConfigurationSetAttributes(args: PutEmailIdentityConfigurationSetAttributesCommandInput, options?: __HttpHandlerOptions): Promise<PutEmailIdentityConfigurationSetAttributesCommandOutput>;
    putEmailIdentityConfigurationSetAttributes(args: PutEmailIdentityConfigurationSetAttributesCommandInput, cb: (err: any, data?: PutEmailIdentityConfigurationSetAttributesCommandOutput) => void): void;
    putEmailIdentityConfigurationSetAttributes(args: PutEmailIdentityConfigurationSetAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutEmailIdentityConfigurationSetAttributesCommandOutput) => void): void;
    /**
     * <p>Used to enable or disable DKIM authentication for an email identity.</p>
     */
    putEmailIdentityDkimAttributes(args: PutEmailIdentityDkimAttributesCommandInput, options?: __HttpHandlerOptions): Promise<PutEmailIdentityDkimAttributesCommandOutput>;
    putEmailIdentityDkimAttributes(args: PutEmailIdentityDkimAttributesCommandInput, cb: (err: any, data?: PutEmailIdentityDkimAttributesCommandOutput) => void): void;
    putEmailIdentityDkimAttributes(args: PutEmailIdentityDkimAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutEmailIdentityDkimAttributesCommandOutput) => void): void;
    /**
     * <p>Used to configure or change the DKIM authentication settings for an email domain
     *             identity. You can use this operation to do any of the following:</p>
     *         <ul>
     *             <li>
     *                 <p>Update the signing attributes for an identity that uses Bring Your Own DKIM
     *                     (BYODKIM).</p>
     *             </li>
     *             <li>
     *                 <p>Update the key length that should be used for Easy DKIM.</p>
     *             </li>
     *             <li>
     *                 <p>Change from using no DKIM authentication to using Easy DKIM.</p>
     *             </li>
     *             <li>
     *                 <p>Change from using no DKIM authentication to using BYODKIM.</p>
     *             </li>
     *             <li>
     *                 <p>Change from using Easy DKIM to using BYODKIM.</p>
     *             </li>
     *             <li>
     *                 <p>Change from using BYODKIM to using Easy DKIM.</p>
     *             </li>
     *          </ul>
     */
    putEmailIdentityDkimSigningAttributes(args: PutEmailIdentityDkimSigningAttributesCommandInput, options?: __HttpHandlerOptions): Promise<PutEmailIdentityDkimSigningAttributesCommandOutput>;
    putEmailIdentityDkimSigningAttributes(args: PutEmailIdentityDkimSigningAttributesCommandInput, cb: (err: any, data?: PutEmailIdentityDkimSigningAttributesCommandOutput) => void): void;
    putEmailIdentityDkimSigningAttributes(args: PutEmailIdentityDkimSigningAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutEmailIdentityDkimSigningAttributesCommandOutput) => void): void;
    /**
     * <p>Used to enable or disable feedback forwarding for an identity. This setting determines
     *             what happens when an identity is used to send an email that results in a bounce or
     *             complaint event.</p>
     *         <p>If the value is <code>true</code>, you receive email notifications when bounce or
     *             complaint events occur. These notifications are sent to the address that you specified
     *             in the <code>Return-Path</code> header of the original email.</p>
     *         <p>You're required to have a method of tracking bounces and complaints. If you haven't
     *             set up another mechanism for receiving bounce or complaint notifications (for example,
     *             by setting up an event destination), you receive an email notification when these events
     *             occur (even if this setting is disabled).</p>
     */
    putEmailIdentityFeedbackAttributes(args: PutEmailIdentityFeedbackAttributesCommandInput, options?: __HttpHandlerOptions): Promise<PutEmailIdentityFeedbackAttributesCommandOutput>;
    putEmailIdentityFeedbackAttributes(args: PutEmailIdentityFeedbackAttributesCommandInput, cb: (err: any, data?: PutEmailIdentityFeedbackAttributesCommandOutput) => void): void;
    putEmailIdentityFeedbackAttributes(args: PutEmailIdentityFeedbackAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutEmailIdentityFeedbackAttributesCommandOutput) => void): void;
    /**
     * <p>Used to enable or disable the custom Mail-From domain configuration for an email
     *             identity.</p>
     */
    putEmailIdentityMailFromAttributes(args: PutEmailIdentityMailFromAttributesCommandInput, options?: __HttpHandlerOptions): Promise<PutEmailIdentityMailFromAttributesCommandOutput>;
    putEmailIdentityMailFromAttributes(args: PutEmailIdentityMailFromAttributesCommandInput, cb: (err: any, data?: PutEmailIdentityMailFromAttributesCommandOutput) => void): void;
    putEmailIdentityMailFromAttributes(args: PutEmailIdentityMailFromAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutEmailIdentityMailFromAttributesCommandOutput) => void): void;
    /**
     * <p>Adds an email address to the suppression list for your account.</p>
     */
    putSuppressedDestination(args: PutSuppressedDestinationCommandInput, options?: __HttpHandlerOptions): Promise<PutSuppressedDestinationCommandOutput>;
    putSuppressedDestination(args: PutSuppressedDestinationCommandInput, cb: (err: any, data?: PutSuppressedDestinationCommandOutput) => void): void;
    putSuppressedDestination(args: PutSuppressedDestinationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutSuppressedDestinationCommandOutput) => void): void;
    /**
     * <p>Composes an email message to multiple destinations.</p>
     */
    sendBulkEmail(args: SendBulkEmailCommandInput, options?: __HttpHandlerOptions): Promise<SendBulkEmailCommandOutput>;
    sendBulkEmail(args: SendBulkEmailCommandInput, cb: (err: any, data?: SendBulkEmailCommandOutput) => void): void;
    sendBulkEmail(args: SendBulkEmailCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SendBulkEmailCommandOutput) => void): void;
    /**
     * <p>Adds an email address to the list of identities for your Amazon SES account in the current
     *             Amazon Web Services Region and attempts to verify it. As a result of executing this operation, a
     *             customized verification email is sent to the specified address.</p>
     *         <p>To use this operation, you must first create a custom verification email template. For
     *             more information about creating and using custom verification email templates, see
     *                 <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-verify-address-custom.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer
     *                 Guide</i>.</p>
     *         <p>You can execute this operation no more than once per second.</p>
     */
    sendCustomVerificationEmail(args: SendCustomVerificationEmailCommandInput, options?: __HttpHandlerOptions): Promise<SendCustomVerificationEmailCommandOutput>;
    sendCustomVerificationEmail(args: SendCustomVerificationEmailCommandInput, cb: (err: any, data?: SendCustomVerificationEmailCommandOutput) => void): void;
    sendCustomVerificationEmail(args: SendCustomVerificationEmailCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SendCustomVerificationEmailCommandOutput) => void): void;
    /**
     * <p>Sends an email message. You can use the Amazon SES API v2 to send the following types of
     *             messages:</p>
     *         <ul>
     *             <li>
     *                 <p>
     *                   <b>Simple</b> – A standard email message. When
     *                     you create this type of message, you specify the sender, the recipient, and the
     *                     message body, and Amazon SES assembles the message for you.</p>
     *             </li>
     *             <li>
     *                 <p>
     *                   <b>Raw</b> – A raw, MIME-formatted email
     *                     message. When you send this type of email, you have to specify all of the
     *                     message headers, as well as the message body. You can use this message type to
     *                     send messages that contain attachments. The message that you specify has to be a
     *                     valid MIME message.</p>
     *             </li>
     *             <li>
     *                 <p>
     *                   <b>Templated</b> – A message that contains
     *                     personalization tags. When you send this type of email, Amazon SES API v2 automatically
     *                     replaces the tags with values that you specify.</p>
     *             </li>
     *          </ul>
     */
    sendEmail(args: SendEmailCommandInput, options?: __HttpHandlerOptions): Promise<SendEmailCommandOutput>;
    sendEmail(args: SendEmailCommandInput, cb: (err: any, data?: SendEmailCommandOutput) => void): void;
    sendEmail(args: SendEmailCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SendEmailCommandOutput) => void): void;
    /**
     * <p>Add one or more tags (keys and values) to a specified resource. A
     *                 <i>tag</i> is a label that you optionally define and associate with a
     *             resource. Tags can help you categorize and manage resources in different ways, such as
     *             by purpose, owner, environment, or other criteria. A resource can have as many as 50
     *             tags.</p>
     *         <p>Each tag consists of a required <i>tag key</i> and an
     *                 associated <i>tag value</i>, both of which you define. A tag key is a
     *             general label that acts as a category for more specific tag values. A tag value acts as
     *             a descriptor within a tag key.</p>
     */
    tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
    tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
    tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
    /**
     * <p>Creates a preview of the MIME content of an email when provided with a template and a
     *             set of replacement data.</p>
     *
     *         <p>You can execute this operation no more than once per second.</p>
     */
    testRenderEmailTemplate(args: TestRenderEmailTemplateCommandInput, options?: __HttpHandlerOptions): Promise<TestRenderEmailTemplateCommandOutput>;
    testRenderEmailTemplate(args: TestRenderEmailTemplateCommandInput, cb: (err: any, data?: TestRenderEmailTemplateCommandOutput) => void): void;
    testRenderEmailTemplate(args: TestRenderEmailTemplateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TestRenderEmailTemplateCommandOutput) => void): void;
    /**
     * <p>Remove one or more tags (keys and values) from a specified resource.</p>
     */
    untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
    untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
    untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
    /**
     * <p>Update the configuration of an event destination for a configuration set.</p>
     *         <p>
     *             <i>Events</i> include message sends, deliveries, opens, clicks, bounces,
     *             and complaints. <i>Event destinations</i> are places that you can send
     *             information about these events to. For example, you can send event data to Amazon SNS to
     *             receive notifications when you receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to
     *             stream data to Amazon S3 for long-term storage.</p>
     */
    updateConfigurationSetEventDestination(args: UpdateConfigurationSetEventDestinationCommandInput, options?: __HttpHandlerOptions): Promise<UpdateConfigurationSetEventDestinationCommandOutput>;
    updateConfigurationSetEventDestination(args: UpdateConfigurationSetEventDestinationCommandInput, cb: (err: any, data?: UpdateConfigurationSetEventDestinationCommandOutput) => void): void;
    updateConfigurationSetEventDestination(args: UpdateConfigurationSetEventDestinationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateConfigurationSetEventDestinationCommandOutput) => void): void;
    /**
     * <p>Updates a contact's preferences for a list. It is not necessary to specify all
     *             existing topic preferences in the TopicPreferences object, just the ones that need
     *             updating.</p>
     */
    updateContact(args: UpdateContactCommandInput, options?: __HttpHandlerOptions): Promise<UpdateContactCommandOutput>;
    updateContact(args: UpdateContactCommandInput, cb: (err: any, data?: UpdateContactCommandOutput) => void): void;
    updateContact(args: UpdateContactCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateContactCommandOutput) => void): void;
    /**
     * <p>Updates contact list metadata. This operation does a complete replacement.</p>
     */
    updateContactList(args: UpdateContactListCommandInput, options?: __HttpHandlerOptions): Promise<UpdateContactListCommandOutput>;
    updateContactList(args: UpdateContactListCommandInput, cb: (err: any, data?: UpdateContactListCommandOutput) => void): void;
    updateContactList(args: UpdateContactListCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateContactListCommandOutput) => void): void;
    /**
     * <p>Updates an existing custom verification email template.</p>
     *         <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-verify-address-custom.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer
     *                 Guide</i>.</p>
     *         <p>You can execute this operation no more than once per second.</p>
     */
    updateCustomVerificationEmailTemplate(args: UpdateCustomVerificationEmailTemplateCommandInput, options?: __HttpHandlerOptions): Promise<UpdateCustomVerificationEmailTemplateCommandOutput>;
    updateCustomVerificationEmailTemplate(args: UpdateCustomVerificationEmailTemplateCommandInput, cb: (err: any, data?: UpdateCustomVerificationEmailTemplateCommandOutput) => void): void;
    updateCustomVerificationEmailTemplate(args: UpdateCustomVerificationEmailTemplateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateCustomVerificationEmailTemplateCommandOutput) => void): void;
    /**
     * <p>Updates the specified sending authorization policy for the given identity (an email
     *             address or a domain). This API returns successfully even if a policy with the specified
     *             name does not exist.</p>
     *         <note>
     *             <p>This API is for the identity owner only. If you have not verified the identity,
     *                 this API will return an error.</p>
     *         </note>
     *         <p>Sending authorization is a feature that enables an identity owner to authorize other
     *             senders to use its identities. For information about using sending authorization, see
     *             the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer
     *                 Guide</a>.</p>
     *
     *         <p>You can execute this operation no more than once per second.</p>
     */
    updateEmailIdentityPolicy(args: UpdateEmailIdentityPolicyCommandInput, options?: __HttpHandlerOptions): Promise<UpdateEmailIdentityPolicyCommandOutput>;
    updateEmailIdentityPolicy(args: UpdateEmailIdentityPolicyCommandInput, cb: (err: any, data?: UpdateEmailIdentityPolicyCommandOutput) => void): void;
    updateEmailIdentityPolicy(args: UpdateEmailIdentityPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateEmailIdentityPolicyCommandOutput) => void): void;
    /**
     * <p>Updates an email template. Email templates enable you to send personalized email to
     *             one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer
     *                 Guide</a>.</p>
     *         <p>You can execute this operation no more than once per second.</p>
     */
    updateEmailTemplate(args: UpdateEmailTemplateCommandInput, options?: __HttpHandlerOptions): Promise<UpdateEmailTemplateCommandOutput>;
    updateEmailTemplate(args: UpdateEmailTemplateCommandInput, cb: (err: any, data?: UpdateEmailTemplateCommandOutput) => void): void;
    updateEmailTemplate(args: UpdateEmailTemplateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateEmailTemplateCommandOutput) => void): void;
}
